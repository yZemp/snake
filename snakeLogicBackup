/************* Vars ***************/
var alreadyInitialized = false;
var hasEaten = false;
var position = [
  [15, 11],
  [15, 10],
  [15, 9],
  [15, 8]
];
var head = position[0];
var tail = [];
var direction = 'right';
var newDirectionTry;
var movement;
var movementLog = [];
var nextPosition;

function opposite(direzione) {
  switch (direzione) {
    case 'up':
      return 'down';
      break;
    case 'down':
      return 'up';
    case 'left':
      return 'right';
      break;
    case 'right':
      return 'left';
      break;
    default:
      return -1;
  }
}

/******** What if mobile? *********/

function checkIfMobile() {
  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
    mobileRedAlert();
  } else {
    return;
  }

}

function mobileRedAlert() {
  document.querySelector('.play-button').style.display = 'none';
  document.querySelector('#main-wrapper img').style.display = 'none';
  document.querySelector('.game-frame').style.border = 'border: 5px solid var(--red)';
  document.querySelector('.game-frame').style.color = 'var(--red)';
  document.querySelector('.game-frame').innerHTML = 'It seems that your using a mobile device! Unfortunately, to this day this game is only available on PCs.';
}

/******** Audio stuff *********/

var audio = new Audio('snakeMedia/music.mp3');
audio.play();


/******* Event listeners *******/

document.querySelector('.play-button').addEventListener('click', initializeGame);

function addFunctionToNewBtn() {
  document.querySelector('.option-btn').addEventListener('click', showOptions);
}

function addFunctionToResume() {
  document.querySelector('#resume').addEventListener('click', unshowOptions);
}

function addOrientationChangerListener() {
  // prevent the page from scrolling
  window.addEventListener("keydown", function (e) {
    // space and arrow keys
    if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
      e.preventDefault();
    }
  }, false);

  document.addEventListener('keydown', function (e) {
    changeDirection(e);
  })
}

// DOESNT WORK DO TO PROBLEMS DETECTING ESCAPE KEY
// function addEscEventListener() {
//   document.addEventListener('keypress', function (e) {
//     console.log(e);
//     if (e.key === "0") {
//       unshowOptions();
//     }
//   });
// }

document.querySelector("input[name=checkbox]").addEventListener('change', function () {
  if (this.checked) {
    // reactivate music
    audio.play();
  } else {
    // deactivate music
    audio.pause();
  }
});


/**********************************
 ************* General ************
 **********************************/

console.log('Welcome player!\nPls do not resize this window, i ask you kindly. I didnt give a shit about responsivness\nThank you and have fun :D');

function changeOptionBtn() {
  document.querySelector('.play-button').innerHTML = 'Options';
  document.querySelector('.play-button').classList.add('option-btn');
  addFunctionToNewBtn();
}

function showOptions() {
  clearInterval(movement);
  document.querySelector('.play-button').style.display = 'none';
  document.querySelector('#main-wrapper img').style.display = 'none';
  document.querySelector('.game-frame').classList.toggle('options-panel');
  document.querySelector('#main-wrapper').style.position = 'relative';
  document.querySelector('#main-wrapper').style.left = '-100px';
  document.querySelector('#main-wrapper').style.width = '2100px';
  document.querySelector('table').style.display = 'none';
  addOptionTable();
  console.log('Show options executed');
}

function addOptionTable() {
  document.querySelector('#option-table').style.display = 'flex';
  addFunctionToResume();
  // addEscEventListener();
}

function unshowOptions() {
  setMovement();
  document.querySelector('.play-button').style.display = 'unset';
  document.querySelector('#main-wrapper img').style.display = 'unset';
  document.querySelector('.game-frame').classList.toggle('options-panel');
  document.querySelector('#main-wrapper').style.position = 'unset';
  document.querySelector('#main-wrapper').style.left = 'unset';
  document.querySelector('#main-wrapper').style.width = 'unset';
  document.querySelector('table').style.display = 'table';
  removeOptionTable();
  console.log('Unshow options executed');
}

function removeOptionTable() {
  document.querySelector('#option-table').style.display = 'none';
}


/**********************************
 ************** Game **************
 **********************************/

function initializeGame() {
  changeOptionBtn();
  document.querySelector('.game-frame').style.display = 'block';
  checkIfMobile();
  window.scrollTo(0, 450);

  if (alreadyInitialized) {
    return;
  }

  initializeTable();
  displayInitialSnake();
  addOrientationChangerListener();
  setMovement();

  alreadyInitialized = true;
}

function initializeTable() {
  var gameFrame = document.querySelector('.game-frame');
  var table = document.createElement('table');
  var tbody = document.createElement('tbody');
  for (let i = 0; i < 20; i++) {
    var tr = document.createElement('tr');
    for (let k = 0; k < 20; k++) {
      var td = document.createElement('td');
      td.classList.add(`x${i}`);
      td.classList.add(`y${k}`);
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  table.appendChild(tbody);
  gameFrame.appendChild(table);
}

function displayInitialSnake() {
  var cellPosition;
  for (let i = 0; i < 4; i++) {
    cellPosition = position[i];
    document.querySelector(`.x${cellPosition[0]}.y${cellPosition[1]}`).style.background = 'var(--main-green)';
  }

  document.querySelector(`.x${head[0]}.y${head[1]}`).style.background = 'var(--contrast)';
}

function setMovement() {
  movement = setInterval(move, 800);
}

function changeDirection(newDir) {
  switch (newDir.keyCode) {
    // up
    case 38:
    case 87:
      newDirectionTry = 'up';
      break;

      // left
    case 37:
    case 65:
      newDirectionTry = 'left';
      break;

      // down
    case 40:
    case 83:
      newDirectionTry = 'down';
      break;

      // right
    case 39:
    case 68:
      newDirectionTry = 'right';
      break;
    default:
      return -1;
  }

  // check if valid
  if (newDirectionTry === direction) {
    console.log('Already moving that way');
    return;
  } else if (newDirectionTry === opposite(direction)) {
    console.log('Can\'t move backwards!');
    return;
  }

  direction = newDirectionTry;
  console.log(newDir);
}

function move() {
  getPosition();
  document.querySelector(`.x${head[0]}.y${head[1]}`).style.background = 'var(--main-green)';

  // move the head
  switch (direction) {
    case 'right':
      document.querySelector(`.x${head[0]}.y${parseInt(`${head[1]}`, 10) + 1}`).style.background = 'var(--contrast)';
      movementLog.push('right');
      break;
    case 'left':
      document.querySelector(`.x${head[0]}.y${parseInt(`${head[1]}`, 10) - 1}`).style.background = 'var(--contrast)';
      movementLog.push('left');
      break;
    case 'up':
      document.querySelector(`.x${parseInt(`${head[0]}`, 10) - 1}.y${head[1]}`).style.background = 'var(--contrast)';
      movementLog.push('up');
      break;
    case 'down':
      document.querySelector(`.x${parseInt(`${head[0]}`, 10) + 1}.y${head[1]}`).style.background = 'var(--contrast)';
      movementLog.push('down');
      break;
    default:
      return -1;
      break;
  }

  // remove the tail (if hasEaten === false)
  if (!hasEaten) {
    tail = getTailCoordinates();

    document.querySelector(`.x${parseInt(`${head[0]}`, 10)}.y${parseInt(`${head[1]}`, 10)}`).style.background = 'unset';
  }

  console.log('moved', `--${direction}`);
}

function getPosition() {
  position = [];
  for (let i = 0; i < 20; i++) {
    for (let j = 0; j < 20; j++) {
      if (document.querySelector(`.x${i}.y${j}`).style.background === 'var(--main-green)') {
        position.push([`${i}`, `${j}`]);
      } else if (document.querySelector(`.x${i}.y${j}`).style.background === 'var(--contrast)') {
        position.unshift([`${i}`, `${j}`]);
      }
    }
  }

  head = position[0];
  tail = position[position.length - 1];
}

function getTailCoordinates() {
  
}
